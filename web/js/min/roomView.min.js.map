{"version":3,"sources":["web/js/roomView.js"],"names":["exports","dock","handler","callControlsElem","feedbackButton","togglePublisherVideoElem","togglePublisherAudioElem","startArchivingElem","stopArchivingElem","annotateBtnElem","manageRecordingsElem","messageButtonElem","participantsStrElem","recordingsNumberElem","videoSwitch","audioSwitch","topBannerElem","screenElem","unreadCountElem","enableArchiveManager","enableSip","hideCallControlsTimer","hideFeedbackButtonTimer","overCallControls","overFeedbackButton","_unreadMsg","_chatHasBeenShown","chatVisible","MODAL_TXTS","mute","head","detail","button","muteRemotely","unmutedRemotely","join","lock","endCall","endLockedCall","altButton","sessionDisconnected","chromePublisherError","meetingFullError","maxUsersPerRoom","setUnreadMessages","count","textContent","setChatStatus","visible","classList","add","window","innerWidth","hideCallControls","remove","Utils","sendEvent","HTMLElems","flush","chatViews","[object Object]","chatEvents","document","body","data","hangoutEvents","event","status","contains","screenShareCtrEvents","changeScreenShareStatus","toggleScreenSharing","destroyed","bind","undefined","isSharing","setDisabled","roomControllerEvents","evt","name","setSwitchStatus","lockState","RoomView","menuLockIcon","getElementById","menuLockText","navBarStateIcon","innerHTML","setAttribute","style","display","Modal","flashMessage","isJoining","setAudioSwitchRemotely","showConfirm","participantsNumber","LayoutManager","removeAll","elements","querySelectorAll","Array","prototype","forEach","call","element","then","location","reload","isMuted","setPublisherAudioSwitchStatus","initHTMLElements","querySelector","showControls","setTimeout","hideFeedbackButton","showFeedbackButton","bubbleUp","domElem","evtName","oldStatus","newStatus","toggle","cronograph","getCronograph","Promise","resolve","LazyLoader","dependencyLoad","Cronograph","addHandlers","addEventListener","e","elem","target","getAncestorByTagName","id","hasVideo","hasAudio","accept","altHasAccepted","BubbleFactory","get","hide","enableRoomLocking","getAttribute","select","start","value","blur","shouldDisable","preventDefault","addEventsHandlers","phonenumber","archive","duration","Math","round","Date","now","createdAt","init","onModel","archives","FirebaseModel","archiveId","onValue","removeEventListener","model","RecordingsController","gotModel","stop","enableHangoutScroll","aEnableArchiveManager","aEnableSip","visibility","textArea","urlToShare","origin","pathname","getURLtoShare","replaceText","removeProperty","recordingsNumber","showRoom","clearTimeout","showPublisherButtons","publisherOptions","publishVideo","publishAudio","createStreamView","streamId","type","controlBtns","append","deleteStreamView","showConfirmChangeMicStatus","this"],"mappings":"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","sourcesContent":["/* global RoomView, Cronograph, FirebaseModel, RecordingsController, Modal,\nBubbleFactory, LayoutManager, $, maxUsersPerRoom */\n\n!(exports => {\n  // HTML elements for the view\n  let dock;\n  let handler;\n  let callControlsElem;\n  let feedbackButton;\n  let togglePublisherVideoElem;\n  let togglePublisherAudioElem;\n  let startArchivingElem;\n  let stopArchivingElem;\n  let annotateBtnElem;\n  let manageRecordingsElem;\n  let messageButtonElem;\n  let participantsStrElem;\n  let recordingsNumberElem;\n  let videoSwitch;\n  let audioSwitch;\n  let topBannerElem;\n  let screenElem;\n  let unreadCountElem;\n  let enableArchiveManager;\n  let enableSip;\n  let hideCallControlsTimer;\n  let hideFeedbackButtonTimer;\n  let overCallControls = false;\n  let overFeedbackButton = false;\n\n  let _unreadMsg = 0;\n  let _chatHasBeenShown = false;\n  let chatVisible = false;\n\n  const MODAL_TXTS = {\n    mute: {\n      head: 'Mute all participants, including yourself',\n      detail: 'Everyone will be notified and can click their <i data-icon=\"no_mic\"></i> button' +\n              ' to unmute themselves.',\n      button: 'Mute all participants'\n    },\n    muteRemotely: {\n      head: 'All participants microphones are being disabled in the call',\n      detail: 'If you want to keep talking, ' +\n              'you must manually enable your own microphone.',\n      button: 'I understand'\n    },\n    unmutedRemotely: {\n      head: 'Your microphone is now enabled in the call',\n      detail: 'If you want to remain muted, ' +\n              'you must manually disable your own microphone.',\n      button: 'I understand'\n    },\n    join: {\n      head: 'All participants are muted',\n      detail: 'You can unmute everyone by toggling the Mute all participants option. Or you can ' +\n              'unmute just yourself by clicking the microphone icon in the bottom menu.',\n      button: 'I understand'\n    },\n    lock: {\n      head: 'Do you want to lock the meeting?',\n      detail: 'When a meeting room is locked, no one else will be allowed to join the meeting. ' +\n              'Current participants who leave the meeting will not be allowed back in.',\n      button: 'Lock Meeting'\n    },\n    endCall: {\n      head: 'Do you want to leave the meeting?',\n      detail: 'The meeting will continue with the remaining participants.',\n      button: 'Leave meeting'\n    },\n    endLockedCall: {\n      head: 'Do you want to unlock the meeting before leaving?',\n      detail: 'The meeting will continue with the remaining participants. When a meeting room is locked, no one else will be allowed to join or re-join the meeting.',\n      button: 'Unlock and Leave',\n      altButton: 'Leave Without Unlocking'\n    },\n    sessionDisconnected: {\n      head: 'Session disconected',\n      detail: 'The connection to the OpenTok platform has been lost. Check your network ' +\n              'connectivity and press Reload to connect again.',\n      button: 'Reload'\n    },\n    chromePublisherError: {\n      head: 'Internal Chrome Error',\n      detail: 'Failed to acquire microphone. This is a known Chrome bug. Please completely quit ' +\n              'and restart your browser.',\n      button: 'Reload'\n    },\n    meetingFullError: {\n      head: 'Meeting Full',\n      detail: `This meeting has reached the full capacity of ${maxUsersPerRoom} participants. Try&nbsp;joining later.`,\n      button: 'OK'\n    }\n  };\n\n  const NOT_SHARING = {\n    detail: {\n      isSharing: false\n    }\n  };\n\n  function setUnreadMessages(count) {\n    if (!chatVisible) {\n      _unreadMsg = count;\n      unreadCountElem.textContent = (count === 0) ? '' : `(${count})`;\n    }\n  }\n\n  function setChatStatus(visible) {\n    chatVisible = visible;\n    if (visible) {\n      _chatHasBeenShown = true;\n      setUnreadMessages(0);\n      messageButtonElem.classList.add('activated');\n\n      // hide call controls on small screens\n      if (window.innerWidth <= 480) {\n        hideCallControls();\n      }\n    } else {\n      messageButtonElem.classList.remove('activated');\n    }\n    Utils.sendEvent('roomView:chatVisibility', visible);\n    HTMLElems.flush('#toggleChat');\n  }\n\n  const chatViews = {\n    unreadMessage() {\n      if (!_chatHasBeenShown) {\n        setChatStatus(true);\n      }\n      setUnreadMessages(_unreadMsg + 1);\n    },\n    hidden() {\n      Utils.sendEvent('roomView:screenChange');\n    },\n    shown() {\n      Utils.sendEvent('roomView:screenChange');\n    }\n  };\n\n  const chatEvents = {\n    hidden() {\n      document.body.data('chatStatus', 'hidden');\n      messageButtonElem.classList.remove('activated');\n      setUnreadMessages(0);\n      HTMLElems.flush('#toggleChat');\n    }\n  };\n\n  const hangoutEvents = {\n    screenOnStage(event) {\n      const status = event.detail.status;\n      if (status === 'on') {\n        dock.data('previouslyCollapsed', dock.classList.contains('collapsed'));\n        dock.classList.add('collapsed');\n      } else if (dock.data('previouslyCollapsed') !== null) {\n        dock.data('previouslyCollapsed') === 'true' ? dock.classList.add('collapsed') :\n          dock.classList.remove('collapsed');\n        dock.data('previouslyCollapsed', null);\n      }\n    },\n    rearranged() {\n      Utils.sendEvent('roomView:screenChange');\n    }\n  };\n\n  const screenShareCtrEvents = {\n    changeScreenShareStatus: toggleScreenSharing,\n    destroyed: toggleScreenSharing.bind(undefined, NOT_SHARING),\n    annotationStarted() {\n      Utils.setDisabled(annotateBtnElem, false);\n    },\n    annotationEnded() {\n      document.body.data('annotationVisible', 'false');\n      Utils.setDisabled(annotateBtnElem, true);\n    }\n  };\n\n  const roomControllerEvents = {\n    userChangeStatus(evt) {\n      // If user changed the status we need to reset the switch\n      if (evt.detail.name === 'video') {\n        setSwitchStatus(false, false, videoSwitch, 'roomView:videoSwitch');\n      } else if (evt.detail.name === 'audio') {\n        setSwitchStatus(false, false, audioSwitch, 'roomView:muteAllSwitch');\n      }\n    },\n    roomLocked(evt) {\n      const lockState = evt.detail;\n      RoomView.lockState = lockState;\n      const menuLockIcon = document.getElementById('lock-room-icon');\n      const menuLockText = document.getElementById('lock-msg');\n      const navBarStateIcon = document.getElementById('room-locked-state');\n\n      if (lockState === 'locked') {\n        menuLockText.innerHTML = 'Unlock Meeting';\n        menuLockIcon.setAttribute('data-icon', 'closedLock');\n        navBarStateIcon.style.display = 'block';\n      }\n      if (lockState === 'unlocked') {\n        menuLockText.innerHTML = 'Lock Meeting';\n        menuLockIcon.setAttribute('data-icon', 'openLock');\n        navBarStateIcon.style.display = 'none';\n\n        Modal.flashMessage('.room-unlocked-modal');\n      }\n    },\n    roomMuted(evt) {\n      const isJoining = evt.detail.isJoining;\n      setAudioSwitchRemotely(true);\n      Modal.showConfirm(isJoining ? MODAL_TXTS.join : MODAL_TXTS.muteRemotely);\n    },\n    sessionDisconnected() {\n      RoomView.participantsNumber = 0;\n      LayoutManager.removeAll();\n    },\n    controllersReady() {\n      const selectorStr = '#top-banner [disabled], .call-controls [disabled]'\n        + ':not(#toggle-publisher-video):not(#toggle-publisher-audio)'\n        + ':not(#annotate)';\n      const elements = document.querySelectorAll(selectorStr);\n      Array.prototype.forEach.call(elements, element => {\n        Utils.setDisabled(element, false);\n      });\n    },\n    annotationStarted() {\n      Utils.setDisabled(annotateBtnElem, false);\n    },\n    annotationEnded() {\n      document.body.data('annotationVisible', 'false');\n      Utils.setDisabled(annotateBtnElem, true);\n    },\n    chromePublisherError() {\n      Modal.showConfirm(MODAL_TXTS.chromePublisherError).then(() => {\n        document.location.reload();\n      });\n    },\n    meetingFullError() {\n      Modal.showConfirm(MODAL_TXTS.meetingFullError).then(() => {\n        document.location.reload();\n      });\n    }\n  };\n\n  function setAudioSwitchRemotely(isMuted) {\n    setSwitchStatus(isMuted, false, audioSwitch, 'roomView:muteAllSwitch');\n    isMuted ?\n      setPublisherAudioSwitchStatus('muted') :\n      setPublisherAudioSwitchStatus('activated');\n  }\n\n  function showConfirmChangeMicStatus(isMuted) {\n    return Modal.showConfirm(isMuted ? MODAL_TXTS.muteRemotely : MODAL_TXTS.unmutedRemotely);\n  }\n\n  function initHTMLElements() {\n    dock = document.getElementById('top-banner');\n    handler = dock;\n    callControlsElem = document.querySelector('.call-controls');\n    feedbackButton = document.querySelector('.feedbackButton');\n    participantsStrElem = document.getElementById('participantsStr');\n    recordingsNumberElem = dock.querySelector('#recordings');\n    videoSwitch = dock.querySelector('#videoSwitch');\n    audioSwitch = dock.querySelector('#audioSwitch');\n    unreadCountElem = document.getElementById('unreadCount');\n    togglePublisherAudioElem = document.getElementById('toggle-publisher-audio');\n    togglePublisherVideoElem = document.getElementById('toggle-publisher-video');\n    startArchivingElem = document.getElementById('startArchiving');\n    stopArchivingElem = document.getElementById('stopArchiving');\n    annotateBtnElem = document.getElementById('annotate');\n    manageRecordingsElem = document.getElementById('manageRecordings');\n    messageButtonElem = document.getElementById('message-btn');\n    topBannerElem = document.getElementById('top-banner');\n    screenElem = document.getElementById('screen');\n\n    // The title takes two lines maximum when the dock is expanded. When the title takes\n    // one line with expanded mode, it ends taking two lines while is collapsing because the witdh\n    // is reduced, so we have to fix the height to avoid this ugly effect during transition.\n    // var title = dock.querySelector('.info h1');\n    // title.style.height = title.clientHeight + 'px';\n  }\n\n  function createStreamView(streamId, type, controlBtns, name) {\n    return LayoutManager.append(streamId, type, controlBtns, name);\n  }\n\n  function deleteStreamView(id) {\n    LayoutManager.remove(id);\n  }\n\n  function showRoom() {\n    initHTMLElements();\n    topBannerElem.style.visibility = 'visible';\n    screenElem.style.visibility = 'visible';\n    screenElem.addEventListener('mousemove', showControls);\n    callControlsElem.addEventListener('mouseover', () => {\n      clearTimeout(hideCallControlsTimer);\n      overCallControls = true;\n    });\n    callControlsElem.addEventListener('mouseout', () => {\n      overCallControls = false;\n      hideCallControls();\n    });\n    feedbackButton && feedbackButton.addEventListener('mouseover', () => {\n      clearTimeout(hideFeedbackButtonTimer);\n      overFeedbackButton = true;\n    });\n    feedbackButton && feedbackButton.addEventListener('mouseout', () => {\n      overFeedbackButton = false;\n      hideFeedbackButton();\n    });\n  }\n\n  function showControls() {\n    showCallControls();\n    showFeedbackButton();\n  }\n\n  function showCallControls() {\n    callControlsElem.classList.add('visible');\n    if (!overCallControls && !hideCallControlsTimer) {\n      hideCallControlsTimer = setTimeout(hideCallControls, 3000);\n    }\n  }\n\n  function hideCallControls() {\n    hideCallControlsTimer = null;\n    callControlsElem.classList.remove('visible');\n  }\n\n  function showFeedbackButton() {\n    if (!feedbackButton) {\n      return;\n    }\n    feedbackButton.classList.add('visible');\n    if (!overFeedbackButton && !hideFeedbackButtonTimer) {\n      hideFeedbackButtonTimer = setTimeout(hideFeedbackButton, 3000);\n    }\n  }\n\n  function hideFeedbackButton() {\n    hideFeedbackButtonTimer = null;\n    feedbackButton.classList.remove('visible');\n  }\n\n\n  function showPublisherButtons(publisherOptions) {\n    Utils.setDisabled(togglePublisherVideoElem, false);\n    Utils.setDisabled(togglePublisherAudioElem, false);\n    if (publisherOptions.publishVideo) {\n      togglePublisherVideoElem.classList.add('activated');\n      togglePublisherVideoElem.querySelector('i').data('icon', 'video_icon');\n    }\n    if (publisherOptions.publishAudio) {\n      setPublisherAudioSwitchStatus('activated');\n    }\n  }\n\n  function setSwitchStatus(status, bubbleUp, domElem, evtName) {\n    const oldStatus = domElem.classList.contains('activated');\n    let newStatus;\n    if (status === undefined) {\n      newStatus = domElem.classList.toggle('activated');\n    } else {\n      newStatus = status;\n      if (status) {\n        domElem.classList.add('activated');\n      } else {\n        domElem.classList.remove('activated');\n      }\n    }\n    bubbleUp && newStatus !== oldStatus && Utils.sendEvent(evtName, { status: newStatus });\n  }\n\n  function setPublisherAudioSwitchStatus(status) {\n    if (status === 'activated') {\n      togglePublisherAudioElem.classList.add('activated');\n      togglePublisherAudioElem.querySelector('i').data('icon', 'mic');\n    } else {\n      togglePublisherAudioElem.classList.remove('activated');\n      togglePublisherAudioElem.querySelector('i').data('icon', 'mic-muted');\n    }\n  }\n\n  let cronograph = null;\n\n  function getCronograph() {\n    if (cronograph) {\n      return Promise.resolve(cronograph);\n    }\n    return LazyLoader.dependencyLoad([\n      '/js/components/cronograph.js'\n    ]).then(() => {\n      cronograph = Cronograph;\n      return cronograph;\n    });\n  }\n\n  function onStartArchiving(data) {\n    getCronograph().then(cronograph => { // eslint-disable-line consistent-return\n      const start = archive => {\n        let duration = 0;\n        archive && (duration = Math.round((Date.now() - archive.createdAt) / 1000));\n        cronograph.start(duration);\n        startArchivingElem.style.display = 'none';\n        stopArchivingElem.style.display = 'block';\n        manageRecordingsElem.classList.add('recording');\n      };\n\n      if (!enableArchiveManager) {\n        cronograph.init();\n        return start(null);\n      }\n\n      const onModel = () => { // eslint-disable-line consistent-return\n        const archives = FirebaseModel.archives;\n        const archiveId = data.id;\n\n        if (archives) {\n          return start(archives[archiveId]);\n        }\n\n        FirebaseModel.addEventListener('value', function onValue(archives) {\n          FirebaseModel.removeEventListener('value', onValue);\n          start(archives[archiveId]);\n        });\n      };\n\n      const model = RecordingsController.model;\n\n      if (model) {\n        cronograph.init();\n        return onModel(model);\n      }\n\n      cronograph.init('Recording');\n      exports.addEventListener('recordings-model-ready', function gotModel() {\n        exports.removeEventListener('recordings-model-ready', gotModel);\n        onModel(RecordingsController.model);\n      });\n    });\n  }\n\n  function onStopArchiving() {\n    getCronograph().then(cronograph => {\n      stopArchivingElem.style.display = 'none';\n      startArchivingElem.style.display = 'inline-block';\n      manageRecordingsElem.classList.remove('recording');\n      cronograph.stop();\n    });\n  }\n\n  const addHandlers = () => {\n    handler.addEventListener('click', () => {\n      dock.classList.toggle('collapsed');\n      dock.data('previouslyCollapsed', null);\n    });\n\n    callControlsElem.addEventListener('click', e => {\n      let elem = e.target;\n      elem = HTMLElems.getAncestorByTagName(elem, 'button');\n      if (elem === null) {\n        return;\n      }\n      switch (elem.id) {\n        case 'addToCall': {\n          Utils.sendEvent('roomView:addToCall');\n          break;\n        }\n        case 'toggle-publisher-video': {\n          let hasVideo;\n          if (elem.classList.contains('activated')) {\n            elem.classList.remove('activated');\n            elem.querySelector('i').data('icon', 'no_video');\n            hasVideo = false;\n          } else {\n            elem.classList.add('activated');\n            elem.querySelector('i').data('icon', 'video_icon');\n            hasVideo = true;\n          }\n          Utils.sendEvent('roomView:togglePublisherVideo', { hasVideo });\n          break;\n        }\n        case 'toggle-publisher-audio': {\n          let hasAudio;\n          if (elem.classList.contains('activated')) {\n            elem.classList.remove('activated');\n            elem.querySelector('i').data('icon', 'mic-muted');\n            hasAudio = false;\n          } else {\n            elem.classList.add('activated');\n            elem.querySelector('i').data('icon', 'mic');\n            hasAudio = true;\n          }\n          Utils.sendEvent('roomView:togglePublisherAudio', { hasAudio });\n          break;\n        }\n        case 'screen-share': {\n          Utils.sendEvent('roomView:shareScreen');\n          break;\n        }\n        case 'annotate': {\n          document.body.data('annotationVisible') === 'true' ?\n            document.body.data('annotationVisible', 'false') : document.body.data('annotationVisible', 'true');\n          Utils.sendEvent('roomView:screenChange');\n          break;\n        }\n        case 'message-btn': {\n          setChatStatus(!messageButtonElem.classList.contains('activated'));\n          break;\n        }\n        case 'endCall': {\n          if (RoomView.lockState === 'locked') {\n            Modal.showConfirm(MODAL_TXTS.endLockedCall).then(accept => {\n              if (accept.altHasAccepted) {\n                RoomView.participantsNumber = 0;\n                Utils.sendEvent('roomView:endCall');\n              } else if (accept) {\n                Utils.sendEvent('roomView:setRoomLockState', 'unlocked');\n                setTimeout(() => {\n                  RoomView.participantsNumber = 0;\n                  Utils.sendEvent('roomView:endCall');\n                }, 3000);\n              }\n            });\n          } else {\n            Modal.showConfirm(MODAL_TXTS.endCall).then(accept => {\n              if (accept) {\n                RoomView.participantsNumber = 0;\n                Utils.sendEvent('roomView:endCall');\n              }\n            });\n          }\n          break;\n        }\n      }\n    });\n\n    const optionIcons = document.getElementById('top-icons-container');\n\n    optionIcons.addEventListener('click', () => {\n      BubbleFactory.get('chooseLayout').hide();\n    });\n\n    if (window.enableRoomLocking) {\n      const lockRoom = document.getElementById('lockRoomContainer');\n\n      lockRoom.addEventListener('click', () => {\n        const lockIcon = document.getElementById('lock-room-icon');\n        const lockState = lockIcon.getAttribute('data-icon');\n        if (lockState === 'openLock') {\n          Modal.showConfirm(MODAL_TXTS.lock).then(lock => {\n            if (lock) {\n              Utils.sendEvent('roomView:setRoomLockState', 'locked');\n            }\n          });\n        }\n        if (lockState === 'closedLock') {\n          Utils.sendEvent('roomView:setRoomLockState', 'unlocked');\n        }\n      });\n    }\n\n    const switchMic = document.getElementById('pickMicContainer');\n\n    switchMic.addEventListener('click', () => {\n      const select = document.getElementById('select-devices');\n      select.style.display = 'inline-block';\n      Modal.showConfirm({\n        head: 'Set mic input',\n        detail: 'Please identify the audio source in the following list:',\n        button: 'Change'\n      }).then(start => {\n        if (start) {\n          Utils.sendEvent('roomView:setAudioSource', select.value);\n        }\n        select.style.display = 'none';\n      });\n    });\n\n    const switchCam = document.getElementById('pickCamContainer');\n\n    switchCam.addEventListener('click', () => {\n      Utils.sendEvent('roomView:toggleFacingMode');\n    });\n\n    const menu = document.getElementById('top-banner');\n\n    menu.addEventListener('click', e => {\n      const elem = HTMLElems.getAncestorByTagName(e.target, 'a') || e.target;\n      // pointer-events is not working on IE so we can receive as target a child\n      elem.blur();\n\n      if (!elem) {\n        return;\n      }\n\n      switch (elem.id) {\n        case 'viewRecordings':\n          BubbleFactory.get('viewRecordings').toggle();\n          break;\n        case 'options-container':\n        case 'chooseLayout':\n          BubbleFactory.get('chooseLayout').toggle();\n          break;\n        case 'startArchiving':\n        case 'stopArchiving':\n          Utils.sendEvent(`roomView:${elem.id}`);\n          break;\n        case 'startChat':\n        case 'stopChat':\n          setChatStatus(elem.id === 'startChat');\n          break;\n        case 'addToCall':\n          Utils.sendEvent('roomView:addToCall');\n          break;\n        case 'startSharingDesktop':\n        case 'stopSharingDesktop':\n          Utils.sendEvent('roomView:shareScreen');\n          break;\n        case 'videoSwitch':\n          if (!videoSwitch.classList.contains('activated')) {\n            setSwitchStatus(true, true, videoSwitch, 'roomView:videoSwitch');\n          } else {\n            setSwitchStatus(false, true, videoSwitch, 'roomView:videoSwitch');\n          }\n          break;\n        case 'audioSwitch':\n          if (!audioSwitch.classList.contains('activated')) {\n            Modal.showConfirm(MODAL_TXTS.mute).then(shouldDisable => {\n              if (shouldDisable) {\n                setSwitchStatus(true, true, audioSwitch, 'roomView:muteAllSwitch');\n                togglePublisherAudioElem.classList.remove('activated');\n              }\n            });\n          } else {\n            setSwitchStatus(false, true, audioSwitch, 'roomView:muteAllSwitch');\n            togglePublisherAudioElem.classList.add('activated');\n          }\n      }\n    });\n\n    if (enableSip) {\n      const dialOutBtn = document.getElementById('dialOutBtn');\n      // Send event to get phonenumber from phoneNumberView\n      dialOutBtn.addEventListener('click', event => {\n        event.preventDefault();\n        Utils.sendEvent('roomView:verifyDialOut');\n      });\n\n      // Listen for PhoneNumberView event\n      Utils.addEventsHandlers('phoneNumberView:', {\n        dialOut(evt) {\n          const phonenumber = evt.detail;\n          Utils.sendEvent('roomView:dialOut', phonenumber);\n        }\n      });\n    }\n\n    exports.addEventListener('archiving', e => {\n      const detail = e.detail;\n\n      switch (detail.status) {\n        case 'started':\n          onStartArchiving(detail);\n\n          break;\n        case 'stopped':\n          onStopArchiving();\n          break;\n      }\n\n      document.body.data('archiveStatus', e.detail.status);\n      HTMLElems.flush(['#toggleArchiving', '[data-stream-type=publisher] [data-icon=\"record\"]']);\n    });\n\n    Utils.addEventsHandlers('screenShareController:', screenShareCtrEvents, exports);\n    Utils.addEventsHandlers('roomController:', roomControllerEvents, exports);\n    Utils.addEventsHandlers('chat:', chatEvents);\n    Utils.addEventsHandlers('chatView:', chatViews);\n    Utils.addEventsHandlers('hangout:', hangoutEvents);\n  };\n\n  function toggleScreenSharing(evt) {\n    const isSharing = evt.detail.isSharing;\n    document.body.data('desktopStatus', isSharing ? 'sharing' : 'notSharing');\n    HTMLElems.flush('#toggleSharing');\n  }\n\n  const getURLtoShare = () => {\n    const textArea = document.getElementById('current-url');\n    const urlToShare = window.location.origin + window.location.pathname;\n    textArea.innerHTML = urlToShare;\n  };\n\n  const init = (enableHangoutScroll, aEnableArchiveManager, aEnableSip) => {\n    enableArchiveManager = aEnableArchiveManager;\n    initHTMLElements();\n    dock.style.visibility = 'visible';\n    enableSip = aEnableSip;\n    addHandlers();\n    getURLtoShare();\n    LayoutManager.init('.streams', enableHangoutScroll);\n  };\n\n  exports.RoomView = {\n    init,\n\n    set participantsNumber(value) {\n      HTMLElems.replaceText(participantsStrElem, value);\n      if (!window.enableRoomLocking) {\n        return;\n      }\n      if (value === 1 && RoomView.lockState !== 'locked') {\n        document.getElementById('lockRoomContainer').style.display = 'none';\n      } else {\n        document.getElementById('lockRoomContainer').style.removeProperty('display');\n      }\n      if (value === 1 && RoomView.lockState === 'locked') {\n        Utils.sendEvent('roomView:setRoomLockState', 'unlocked');\n        document.getElementById('lockRoomContainer').style.display = 'none';\n      }\n    },\n\n    set recordingsNumber(value) {\n      if (!manageRecordingsElem) {\n        return;\n      }\n      if (value === 0) {\n        manageRecordingsElem.style.display = 'none';\n        document.getElementById('toggleArchiving').classList.remove('manage-recordings');\n      } else {\n        manageRecordingsElem.style.display = 'block';\n        recordingsNumberElem && (recordingsNumberElem.textContent = value);\n        document.getElementById('toggleArchiving').classList.add('manage-recordings');\n      }\n    },\n\n    showRoom,\n    showPublisherButtons,\n    createStreamView,\n    deleteStreamView,\n    setAudioSwitchRemotely,\n    showConfirmChangeMicStatus\n  };\n})(this);\n"]}