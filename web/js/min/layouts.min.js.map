{"version":3,"sources":["web/js/layouts.js"],"names":["LayoutBase","container","items","type","this","data","prototype","[object Object]","features","Object","keys","forEach","id","style","feature","flush","Utils","sendEvent","total","length","HTMLElems","Grid","call","create","configurable","columns","Math","ceil","sqrt","width","height","constructor","Float","addDraggableFeature","get","publisher","addedDraggableFeature","getDraggable","then","draggable","on","rearrange","args","apply","destroy","off","arguments","bind","F2FHorizontal","F2FVertical","Hangout","item","handlers","window","addEventListener","sanitize","putItemOnStage","totalOnStage","getRandomItem","updateTotalOnStage","getAttributeName","charAt","toUpperCase","slice","getItemType","getItemId","stageTypeDescriptors","map","aType","attrName","stageIds","ids","descriptor","aIds","totalOnStrip","layoutView:itemSelected","evt","detail","isOnStage","removeCurrentItemFromStage","layoutManager:itemDeleted","removeItemFromStage","layoutManager:itemAdded","screen","handleEvent","putStageId","classList","add","status","find","removeStageId","remove","contains","reset","sanitizedStageIds","Array","querySelectorAll","elem","name","removeEventListener","HangoutHorizontal","streamSelectedId","HangoutVertical"],"mappings":"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","sourcesContent":["const LayoutBase = function (container, items, type) {\n  this.items = items;\n  this.container = container;\n  container.data('currentLayoutType', type);\n};\n\nLayoutBase.prototype = {\n  rearrange() {\n    const features = this.features;\n    Object.keys(this.items).forEach(function (id) {\n      const style = this.items[id].style;\n      Object.keys(features).forEach(feature => {\n        style[feature] = features[feature];\n      });\n    }, this);\n    this.flush();\n    Utils.sendEvent('hangout:rearranged');\n    return this;\n  },\n\n  get features() {\n    return {};\n  },\n\n  get total() {\n    return Object.keys(this.items).length;\n  },\n\n  flush() {\n    HTMLElems.flush(this.container);\n  },\n\n  destroy() {\n    this.container = null;\n  }\n};\n\nconst Grid = function (container, items) {\n  LayoutBase.call(this, container, items, 'grid');\n};\n\nGrid.prototype = Object.create(LayoutBase.prototype, {\n  features: {\n    configurable: false,\n    get() {\n      const total = this.total;\n      const columns = Math.ceil(Math.sqrt(total));\n\n      return {\n        width: `${100 / columns}%`,\n        height: `${100 / Math.ceil(total / columns)}%`\n      };\n    }\n  }\n});\n\nGrid.prototype.constructor = Grid;\n\nconst Float = function (container, items) {\n  LayoutBase.call(this, container, items, 'float');\n  this.addDraggableFeature();\n};\n\nFloat.prototype = Object.create(LayoutBase.prototype, {\n  features: {\n    configurable: false,\n    get() {\n      return {\n        width: '100%',\n        height: '100%'\n      };\n    }\n  },\n\n  publisher: {\n    configurable: false,\n    get() {\n      return this.items.publisher;\n    }\n  }\n});\n\nFloat.prototype.constructor = Float;\n\nFloat.prototype.addDraggableFeature = function () {\n  if (this.addedDraggableFeature || !this.publisher) {\n    return;\n  }\n\n  this.addedDraggableFeature = true;\n  Utils.getDraggable().then(draggable => {\n    draggable.on(this.publisher);\n  });\n};\n\nFloat.prototype.rearrange = function (...args) {\n  LayoutBase.prototype.rearrange.apply(this, args);\n  this.addDraggableFeature();\n};\n\nFloat.prototype.destroy = function () {\n  Utils.getDraggable().then(function (draggable) {\n    draggable.off(this.publisher);\n    LayoutBase.prototype.destroy.apply(this, arguments);\n  }.bind(this));\n};\n\nconst F2FHorizontal = function (container, items) {\n  LayoutBase.call(this, container, items, 'f2f_horizontal');\n};\n\nF2FHorizontal.prototype = Object.create(LayoutBase.prototype, {\n  features: {\n    configurable: false,\n    get() {\n      return {\n        width: '100%',\n        height: `${100 / this.total}%`\n      };\n    }\n  }\n});\n\nF2FHorizontal.prototype.constructor = F2FHorizontal;\n\nconst F2FVertical = function (container, items) {\n  LayoutBase.call(this, container, items, 'f2f_vertical');\n};\n\nF2FVertical.prototype = Object.create(LayoutBase.prototype, {\n  features: {\n    configurable: false,\n    get() {\n      return {\n        width: `${100 / this.total}%`,\n        height: '100%'\n      };\n    }\n  }\n});\n\nF2FVertical.prototype.constructor = F2FVertical;\n\nconst Hangout = function (container, items, item, type) {\n  LayoutBase.call(this, container, items, type);\n  Object.keys(this.handlers).forEach(function (type) {\n    window.addEventListener(type, this);\n  }, this);\n\n  this.sanitize(!!item);\n\n  if (item) {\n    this.putItemOnStage(item);\n  } else if (!this.totalOnStage) {\n    this.putItemOnStage(this.getRandomItem());\n  }\n\n  this.updateTotalOnStage();\n};\n\n/*\n * It returns the data attribute where the id will be stored depending on type\n *\n * @param type - camera or screen\n */\nHangout.getAttributeName = type => {\n  return `onStage${type.charAt(0).toUpperCase()}${type.slice(1)}`;\n};\n\n/*\n * It returns the type of item which is used to index internally\n *\n * @param item - item object\n */\nHangout.getItemType = item => {\n  let type = null;\n\n  switch (item.data('streamType')) {\n    case 'camera':\n    case 'publisher':\n      type = 'camera';\n      break;\n\n    default:\n      type = 'screen';\n  }\n\n  return type;\n};\n\n/*\n * It returns the id of item received as param\n *\n * @param item - item object\n */\nHangout.getItemId = item => {\n  return item.data('id');\n};\n\n/*\n * It returns an array of objects for each event with type and attribute name\n */\nHangout.stageTypeDescriptors = ['camera', 'screen'].map(aType => {\n  return {\n    type: aType,\n    attrName: Hangout.getAttributeName(aType)\n  };\n});\n\nHangout.prototype = Object.create(LayoutBase.prototype, {\n  stageIds: {\n    configurable: false,\n    /*\n     * It returns all ids of items on stage\n     */\n    get() {\n      const ids = {};\n\n      Hangout.stageTypeDescriptors.forEach(function (descriptor) {\n        const id = this.container.data(descriptor.attrName);\n        id && (ids[descriptor.type] = id);\n      }, this);\n\n      return ids;\n    },\n    /*\n     * Store all ids of items on stage\n     */\n    set(aIds) {\n      aIds = aIds || {};\n\n      Hangout.stageTypeDescriptors.forEach(function (descriptor) {\n        if (aIds[descriptor.type]) {\n          this.container.data(descriptor.attrName, aIds[descriptor.type]);\n        } else {\n          this.container.data(descriptor.attrName, null);\n        }\n      }, this);\n    }\n  },\n  totalOnStage: {\n    configurable: false,\n    /*\n     * It returns the total number of items rendered on the stage\n     */\n    get() {\n      return Object.keys(this.stageIds).length;\n    }\n  },\n  totalOnStrip: {\n    configurable: false,\n    /*\n     * It returns the total number of items rendered on the strip\n     */\n    get() {\n      return this.total - this.totalOnStage;\n    }\n  }\n});\n\nHangout.prototype.constructor = Hangout;\n\nHangout.prototype.handlers = {\n  'layoutView:itemSelected': function (evt) {\n    const item = evt.detail.item;\n    if (this.isOnStage(item)) {\n      // Selected item is already on stage so it should be expanded to cover all. That means that\n      // the other item on stage should go to the strip leaving the stage\n      this.removeCurrentItemFromStage(\n        Hangout.getItemType(item) === 'camera' ? 'screen' : 'camera'\n      );\n    } else {\n      this.putItemOnStage(item);\n    }\n    this.updateTotalOnStage();\n  },\n  'layoutManager:itemDeleted': function (evt) {\n    const item = evt.detail.item;\n    if (this.isOnStage(item)) {\n      this.removeItemFromStage(item).updateTotalOnStage();\n      !this.totalOnStage && Utils.sendEvent('hangout:emptyStage');\n    }\n  },\n  'layoutManager:itemAdded': function (evt) {\n    const item = evt.detail.item;\n    // New screen shared goes to stage if there is not another screen shared there\n    if (Hangout.getItemType(item) === 'screen' && !this.stageIds.screen) {\n      this.putItemOnStage(item).updateTotalOnStage();\n    }\n  }\n};\n\nHangout.prototype.handleEvent = function (evt) {\n  this.handlers[evt.type].call(this, evt);\n};\n\n/*\n * It puts an item on stage:\n *\n * 1º) Remove the current item on stage of the same type if it exists and then...\n * 2º) Put the item received as param on the stage\n *\n * @param item - item object\n */\nHangout.prototype.putItemOnStage = function (item) {\n  if (!item) {\n    return this;\n  }\n  const type = Hangout.getItemType(item);\n  this.removeCurrentItemFromStage(type).putStageId(item);\n  item.classList.add('on-stage');\n  type === 'screen' && Utils.sendEvent('hangout:screenOnStage', { status: 'on' });\n  return this;\n};\n\n/*\n * It returns a random item (publisher stream is not included)\n */\nHangout.prototype.getRandomItem = function () {\n  return this.items[Object.keys(this.items).find(id => {\n    return id !== 'publisher';\n  })];\n};\n\n/*\n * It removes the current item on stage given a type if this exists\n *\n * @param type - type of item\n */\nHangout.prototype.removeCurrentItemFromStage = function (type) {\n  const item = this.items[this.stageIds[type]];\n  return this.removeItemFromStage(item);\n};\n\n/*\n * It removes the current item on stage given a type if this exists\n *\n * @param item - item object\n */\nHangout.prototype.removeItemFromStage = function (item) {\n  if (item) {\n    this.removeStageId(item);\n    item.classList.remove('on-stage');\n    Hangout.getItemType(item) === 'screen' &&\n      Utils.sendEvent('hangout:screenOnStage', { status: 'off' });\n  }\n  return this;\n};\n\n/*\n * It returns true if the item is already on stage\n *\n * @param item - item object\n */\nHangout.prototype.isOnStage = item => {\n  return item.classList.contains('on-stage');\n};\n\n/*\n * This method checks the latest status of the stage in order to be synchronized with current\n * items available in the layout.\n *\n * * @param reset - all previous status will be deleted if this flag is true\n */\nHangout.prototype.sanitize = function (reset) {\n  const sanitizedStageIds = {};\n  Array.prototype.forEach.call(this.container.querySelectorAll('.on-stage'), elem => {\n    elem.classList.remove('on-stage');\n  });\n\n  if (!reset) {\n    // Checking items previously on stage if they still exist\n    const stageIds = this.stageIds;\n    Object.keys(stageIds).forEach(function (type) {\n      const id = stageIds[type];\n      const item = this.items[id];\n      if (item) {\n        item.classList.add('on-stage');\n        sanitizedStageIds[type] = id;\n      }\n    }, this);\n  }\n\n  this.stageIds = sanitizedStageIds;\n  return this;\n};\n\n/*\n * It saves an item id on stage\n *\n * @param item - item object\n */\nHangout.prototype.putStageId = function (item) {\n  const ids = this.stageIds;\n  ids[Hangout.getItemType(item)] = Hangout.getItemId(item);\n  this.stageIds = ids;\n  return this;\n};\n\n/*\n * It removes an item id on stage\n *\n * @param item - item object\n */\nHangout.prototype.removeStageId = function (item) {\n  const ids = this.stageIds;\n  delete ids[Hangout.getItemType(item)];\n  this.stageIds = ids;\n  return this;\n};\n\n/*\n * It updates the flag that contains the total number of items on stage in order to update the UI\n */\nHangout.prototype.updateTotalOnStage = function () {\n  this.container.data('totalOnStage', this.totalOnStage);\n  return this.rearrange();\n};\n\nHangout.prototype.destroy = function (...args) {\n  Object.keys(this.handlers).forEach(function (name) {\n    window.removeEventListener(name, this);\n  }, this);\n  LayoutBase.prototype.destroy.apply(this, args);\n};\n\nconst HangoutHorizontal = function (container, items, streamSelectedId) {\n  Hangout.call(this, container, items, streamSelectedId, 'hangout_horizontal');\n};\n\nHangoutHorizontal.prototype = Object.create(Hangout.prototype, {\n  features: {\n    configurable: false,\n    get() {\n      return {\n        width: `${100 / this.totalOnStrip}%`,\n        height: '100%'\n      };\n    }\n  }\n});\n\nHangoutHorizontal.prototype.constructor = HangoutHorizontal;\n\nconst HangoutVertical = function (container, items, streamSelectedId) {\n  Hangout.call(this, container, items, streamSelectedId, 'hangout_vertical');\n};\n\nHangoutVertical.prototype = Object.create(Hangout.prototype, {\n  features: {\n    configurable: false,\n    get() {\n      return {\n        width: '100%',\n        height: `${100 / this.totalOnStrip}%`\n      };\n    }\n  }\n});\n\nHangoutVertical.prototype.constructor = HangoutVertical;\n"]}